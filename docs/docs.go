// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/application": {
            "post": {
                "description": "Only CPSK user can access this endpoint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Application"
                ],
                "summary": "Create job application",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Application information",
                        "name": "application",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Application"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully apply job post",
                        "schema": {
                            "$ref": "#/definitions/model.CPSKUser"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header, request body",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not logged in as CPSK, User is banned or suspended",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/google/callback": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Retrieves a query parameter named \"code\" from the request and returns it in a JSON response",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication code from google",
                        "name": "Code",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.code"
                        }
                    }
                }
            }
        },
        "/auth/google/company": {
            "post": {
                "description": "Checks and creates user in the database, generates an access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Handles Google login authentication for company role, exchanges code for user",
                "parameters": [
                    {
                        "description": "Authentication code from google",
                        "name": "Code",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.code"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login success",
                        "schema": {
                            "$ref": "#/definitions/auth.companyResponse"
                        }
                    },
                    "201": {
                        "description": "Register success",
                        "schema": {
                            "$ref": "#/definitions/auth.companyResponse"
                        }
                    },
                    "400": {
                        "description": "Fail to receive token or fetch user info",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/google/cpsk": {
            "post": {
                "description": "Checks and creates user in the database, generates an access token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Handles Google login authentication for cpsk role, exchanges code for user",
                "parameters": [
                    {
                        "description": "Authentication code from google",
                        "name": "Code",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.code"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login success",
                        "schema": {
                            "$ref": "#/definitions/auth.cpskResponse"
                        }
                    },
                    "201": {
                        "description": "Register success",
                        "schema": {
                            "$ref": "#/definitions/auth.cpskResponse"
                        }
                    },
                    "400": {
                        "description": "Fail to receive token or fetch user info",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Username must exist and password match",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Handles local login by receiving username and password",
                "parameters": [
                    {
                        "description": "Credentials for login",
                        "name": "Info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.loginInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "If role is cpsk",
                        "schema": {
                            "$ref": "#/definitions/auth.cpskResponse"
                        }
                    },
                    "400": {
                        "description": "Info provided not met the condition",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Username not exist or password incorrect",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database or password hashing error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Username must not already exist and password must longer or equal to 8 characters long",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Handles local registration by receiving username and password",
                "parameters": [
                    {
                        "description": "role can be only 'cpsk' or 'company'",
                        "name": "Info",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.registerInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "If role is cpsk",
                        "schema": {
                            "$ref": "#/definitions/auth.cpskResponse"
                        }
                    },
                    "400": {
                        "description": "Info provided not met the condition",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database or password hashing error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/company/myprofile": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Company"
                ],
                "summary": "Retrieve company profile from database",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieve company profile",
                        "schema": {
                            "$ref": "#/definitions/model.Company"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not logged in as company, User is banned",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/company/profile": {
            "patch": {
                "description": "Overwrite company profile and save into database\nSensitive field like id, file, verified status, and job post can't be overwritten",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Company"
                ],
                "summary": "Edit company profile",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Company info to be written",
                        "name": "company_profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.editCompanyUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully overwrite",
                        "schema": {
                            "$ref": "#/definitions/model.Company"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header or request body",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not logged in as company, User is banned",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/company/profile/banner": {
            "post": {
                "description": "Only file that smaller than 10 MB with .jpg, .jpeg, or .png extension is permitted",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Company"
                ],
                "summary": "Upload banner file for company",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Upload your banner file",
                        "name": "banner",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully upload banner",
                        "schema": {
                            "$ref": "#/definitions/model.Company"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not logged in as company, User is banned",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "413": {
                        "description": "File size is larger than 10 MB",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "File extension is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/company/profile/logo": {
            "post": {
                "description": "Only file that smaller than 10 MB with .jpg, .jpeg, or .png extension is permitted",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Company"
                ],
                "summary": "Upload logo file for company",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Upload your logo file",
                        "name": "logo",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully upload logo",
                        "schema": {
                            "$ref": "#/definitions/model.Company"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not logged in as company, User is banned",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "413": {
                        "description": "File size is larger than 10 MB",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "File extension is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/company/profile/{company_id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Company"
                ],
                "summary": "Retrieve company profile from database by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of company",
                        "name": "company_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieve company profile",
                        "schema": {
                            "$ref": "#/definitions/model.Company"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header\"S",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User is banned",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Company not exist",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/company/{company_id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Company"
                ],
                "summary": "Retrieve company profile from database by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of company",
                        "name": "company_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieve company profile",
                        "schema": {
                            "$ref": "#/definitions/model.Company"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header\"S",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User is banned",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Company not exist",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cpsk/myprofile": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CPSK"
                ],
                "summary": "Retrieve CPSK profile from database",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieve CPSK profile",
                        "schema": {
                            "$ref": "#/definitions/model.CPSKUser"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not logged in as CPSK, User is banned",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cpsk/profile": {
            "patch": {
                "description": "Overwrite CPSK profile and save into database\nSensitive field like id, file, and application can't be overwritten",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CPSK"
                ],
                "summary": "Edit CPSK profile",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "CPSK info to be written",
                        "name": "cpsk_profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.editCPSKUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully overwrite",
                        "schema": {
                            "$ref": "#/definitions/model.CPSKUser"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header or request body",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not logged in as CPSK, User is banned",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/cpsk/profile/resume": {
            "post": {
                "description": "Only file that smaller than 10 MB with .pdf extension is permitted",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CPSK"
                ],
                "summary": "Upload resume file for CPSK",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Upload your resume file",
                        "name": "resume",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully upload resume",
                        "schema": {
                            "$ref": "#/definitions/model.CPSKUser"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not logged in as CPSK, User is banned",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "413": {
                        "description": "File size is larger than 10 MB",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "415": {
                        "description": "File extension is not allowed",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/file/{id}": {
            "get": {
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "File"
                ],
                "summary": "Retrieve dowloadable attachment",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of wanted file",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieve file",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User is banned",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Given file id not found",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Fail to send file content",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/get-companies": {
            "get": {
                "description": "Only admin can access this endpoints\nIf no query given, the server will return all companies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get companies based on given status",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "pending+unverified",
                        "description": "Only pending, unverified, or verified with case insensitive",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Company"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Do not logged in as admin",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/jobpost": {
            "get": {
                "description": "Every query are not required, but they have specific use defined in their description",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobpost"
                ],
                "summary": "Get non-expired job posts based on query",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Search from job post title with substring matching and case insensitive",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Job type field with substring matching and case insensitive",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search if tags field contain tag param, no substring matching and case insensitive",
                        "name": "tag",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Salary field, must exactly match to get result",
                        "name": "salary",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Exp_lvl field, must exactly match to get result",
                        "name": "exp",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search from company name with substring matching and case insensitive",
                        "name": "company",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search from industry of company with substring matching and case insensitive",
                        "name": "industry",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search from location with substring matching and case insensitive",
                        "name": "location",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Sorting by post time in descending if true, otherwise ascendind",
                        "name": "desc",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return non-expired job post(s)",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.JobPost"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header, or invalid job post struct",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User is banned",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Only verified company have access to this endpoint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobpost"
                ],
                "summary": "Create job post based on given json structure",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Input jobpost information",
                        "name": "Jobpost",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EditableJobPostInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully create job post",
                        "schema": {
                            "$ref": "#/definitions/model.JobPost"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header, or invalid job post struct",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not logged in as verified company, User is banned or suspended",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/jobpost/{id}": {
            "delete": {
                "description": "Only company that own the post or admin have access to this endpoint",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobpost"
                ],
                "summary": "Delete given job post ID",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of desired job post",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully delete job post",
                        "schema": {
                            "$ref": "#/definitions/utilities.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header, or invalid job post struct",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Do not have permission to delete this post, User is banned",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Only company that own the post or admin have access to this endpoint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobpost"
                ],
                "summary": "Edit job post based on given json structure",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of desired job post",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Input jobpost information",
                        "name": "Jobpost",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EditableJobPostInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully update job post",
                        "schema": {
                            "$ref": "#/definitions/model.JobPost"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header, or invalid job post struct",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Do not have permission to edit, User is banned",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Post not found",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/punish/{user_id}": {
            "put": {
                "description": "Type of punishment (Only 'ban' or 'suspend' with case insensitive),\n'at' and 'end' fields must be in 'YYYY-MM-DDTHH:mm:ssZ' format.\nOnly 'type' is required 'at' and 'end' are optional\n'at' will be current time by default\n'end' leave empty mean permanent punishment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Ban or suspend user",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of user to be punished",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Detail of punishment",
                        "name": "Detail",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PunishmentStruct"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully punish a user",
                        "schema": {
                            "$ref": "#/definitions/utilities.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header, request body",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Not logged in as Admin, trying to punish other Admin",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/report": {
            "get": {
                "description": "Retrieve reports from database, optionally filtered by status.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Report"
                ],
                "summary": "Retrieve reports from database",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filter reports by status (e.g., pending, reviewed, resolved)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieve reports",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User doesn't have permission to access",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/report/post": {
            "post": {
                "description": "Create a report against a job post.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Report"
                ],
                "summary": "Create a report against a job post",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Report information",
                        "name": "report",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.PostReportRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Report created successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "report_id": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body, reported post not found",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User doesn't have permission to access",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/report/user": {
            "post": {
                "description": "Create a report against a user. Cannot report admins or users with the same role as the reporter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Report"
                ],
                "summary": "Create a report against a user",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Report information",
                        "name": "report",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.UserReportRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Report created successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                },
                                "report_id": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request body, reported user not found, cannot report this user",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User doesn't have permission to access",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/report/{type}/{id}": {
            "put": {
                "description": "Update the status of a report (either on a user or a post).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Report"
                ],
                "summary": "Update the status of a report",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "ID of the report to update",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Type of report to update (user or post)",
                        "name": "type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Report status update information",
                        "name": "report",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "admin_note": {
                                    "type": "string"
                                },
                                "status": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Report status updated successfully",
                        "schema": {
                            "$ref": "#/definitions/utilities.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body, report not found",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "User doesn't have permission to access",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/verify-company/{company_id}": {
            "patch": {
                "description": "Only admin can access this endpoints",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Verify, or unverify companies",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer \u003cyour access token\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Company ID",
                        "name": "company_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "verified",
                        "description": "Status is case insensitive and allow only unverified, or verified (verified by default)",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Company"
                        }
                    },
                    "400": {
                        "description": "Invalid authorization header, or Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Do not logged in as admin",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Given company ID not found",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Database error",
                        "schema": {
                            "$ref": "#/definitions/utilities.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.code": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "auth.companyResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.Company"
                }
            }
        },
        "auth.cpskResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.CPSKUser"
                }
            }
        },
        "auth.loginInfo": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "auth.registerInfo": {
            "type": "object",
            "required": [
                "password",
                "role",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "role": {
                    "type": "string",
                    "enum": [
                        "cpsk",
                        "company"
                    ]
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "controller.PostReportRequest": {
            "type": "object",
            "required": [
                "reason",
                "reported_id"
            ],
            "properties": {
                "reason": {
                    "type": "string"
                },
                "reported_id": {
                    "type": "integer"
                }
            }
        },
        "controller.UserReportRequest": {
            "type": "object",
            "required": [
                "reason",
                "reported_id"
            ],
            "properties": {
                "reason": {
                    "type": "string"
                },
                "reported_id": {
                    "type": "string"
                }
            }
        },
        "controller.editCPSKUser": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "program": {
                    "type": "string"
                },
                "soft_skill": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tel": {
                    "type": "string"
                },
                "year": {
                    "type": "string"
                }
            }
        },
        "controller.editCompanyUser": {
            "type": "object",
            "properties": {
                "industry": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "overview": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "tel": {
                    "type": "string"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "model.Application": {
            "type": "object",
            "required": [
                "post_id",
                "resume_id"
            ],
            "properties": {
                "answer": {
                    "$ref": "#/definitions/model.ApplicationAnswer"
                },
                "answer_id": {
                    "type": "integer"
                },
                "applied_at": {
                    "type": "string"
                },
                "cpsk_id": {
                    "description": "CPSKID references CPSKUser.UserID (uuid)",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "post_id": {
                    "description": "PostID references JobPost.ID",
                    "type": "integer"
                },
                "resume_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "model.ApplicationAnswer": {
            "type": "object",
            "properties": {
                "expected_salary": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "programming_languages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "right_to_work": {
                    "type": "string"
                },
                "year_of_experience": {
                    "type": "integer"
                }
            }
        },
        "model.CPSKUser": {
            "type": "object",
            "properties": {
                "applications": {
                    "description": "List of job applications made by the CPSK user",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Application"
                    }
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "program": {
                    "type": "string"
                },
                "resume_id": {
                    "type": "integer"
                },
                "soft_skill": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                },
                "year": {
                    "type": "string"
                }
            }
        },
        "model.Company": {
            "type": "object",
            "properties": {
                "banner_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "industry": {
                    "type": "string"
                },
                "job_post": {
                    "description": "JobPost holds the company's job posts",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.JobPost"
                    }
                },
                "logo_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "overview": {
                    "type": "string"
                },
                "size": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                },
                "verified_status": {
                    "type": "string"
                }
            }
        },
        "model.EditableJobPostInfo": {
            "type": "object",
            "properties": {
                "desc": {
                    "type": "string"
                },
                "exp_lvl": {
                    "type": "string"
                },
                "expiring": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "req": {
                    "type": "string"
                },
                "salary": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.JobPost": {
            "type": "object",
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Application"
                    }
                },
                "company_id": {
                    "type": "string"
                },
                "desc": {
                    "type": "string"
                },
                "exp_lvl": {
                    "type": "string"
                },
                "expiring": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "post_time": {
                    "type": "string"
                },
                "req": {
                    "type": "string"
                },
                "salary": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.PunishmentStruct": {
            "type": "object",
            "properties": {
                "at": {
                    "type": "string"
                },
                "end": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "profile_picture": {
                    "type": "string"
                },
                "punishment": {
                    "$ref": "#/definitions/model.PunishmentStruct"
                },
                "tel": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "utilities.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "utilities.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
